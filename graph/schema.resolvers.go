package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"fmt"
	"os"

	pg "github.com/go-pg/pg/v10"
	"github.com/paihari/go-pg-gqlgen/awscompose"
	"github.com/paihari/go-pg-gqlgen/graph/model"
	"github.com/paihari/go-pg-gqlgen/ocicompose"
)

// CreateMovie is the resolver for the createMovie field.
func (r *mutationResolver) CreateMovie(ctx context.Context, input model.NewMovie) (*model.Movie, error) {
	movie := model.Movie{
		Title: input.Title,
		URL:   input.URL,
	}

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	_, error := db.Model(&movie).Insert()

	if error != nil {
		return nil, fmt.Errorf("error inserting new movie: %v", error)
	}

	return &movie, nil
}

// CreateBucket is the resolver for the createBucket field.
func (r *mutationResolver) CreateBucket(ctx context.Context, input model.NewBucket) (*model.Bucket, error) {
	awscompose.CreateBucket(input.Name)
	//awscompose.CreateVpc();
	//awscompose.CreateInternetGateway()
	//awscompose.CreateSubnet()

	bucket := model.Bucket{
		Name:        input.Name,
		Description: input.Description,
	}

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	_, error := db.Model(&bucket).Insert()

	if error != nil {
		return nil, fmt.Errorf("error inserting new bucket: %v", error)
	}

	return &bucket, nil
}

// CreateFilesystem is the resolver for the createFilesystem field.
func (r *mutationResolver) CreateFilesystem(ctx context.Context, input model.NewFilesystem) (*model.Filesystem, error) {
	filesystem := model.Filesystem{
		Name:        input.Name,
		Description: input.Description,
	}

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	_, error := db.Model(&filesystem).Insert()

	if error != nil {
		return nil, fmt.Errorf("error inserting new filesystem: %v", error)
	}

	return &filesystem, nil
}

// CreateResident is the resolver for the createResident field.
func (r *mutationResolver) CreateResident(ctx context.Context, input model.NewResident) (*model.Resident, error) {
	resident := model.Resident{
		Name:        input.Name,
		Description: input.Description,
	}

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	_, error := db.Model(&resident).Insert()

	if error != nil {
		return nil, fmt.Errorf("error inserting new resident: %v", error)
	}

	return &resident, nil
}

// CreateDb is the resolver for the createDb field.
func (r *mutationResolver) CreateDb(ctx context.Context, input model.NewDb) (*model.Db, error) {
	db := model.Db{
		Name:   input.Name,
		Secret: input.Secret,
	}

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	dbpg := pg.Connect(opt)
	defer dbpg.Close()

	_, error := dbpg.Model(&db).Insert()

	if error != nil {
		return nil, fmt.Errorf("error inserting new db: %v", error)
	}

	return &db, nil
}

// CreateBackup is the resolver for the createBackup field.
func (r *mutationResolver) CreateBackup(ctx context.Context, input model.NewBackup) (*model.Backup, error) {
	backup := model.Backup{
		Name:        input.Name,
		Description: input.Description,
	}

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	_, error := db.Model(&backup).Insert()

	if error != nil {
		return nil, fmt.Errorf("error inserting new db: %v", error)
	}

	return &backup, nil
}

// CreateSize is the resolver for the createSize field.
func (r *mutationResolver) CreateSize(ctx context.Context, input model.NewSize) (*model.Size, error) {
	size := model.Size{
		Name:    input.Name,
		Cores:   input.Cores,
		Storage: input.Storage,
	}

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	_, error := db.Model(&size).Insert()

	if error != nil {
		return nil, fmt.Errorf("error inserting new db: %v", error)
	}

	return &size, nil
}

// CreateChannel is the resolver for the createChannel field.
func (r *mutationResolver) CreateChannel(ctx context.Context, input model.NewChannel) (*model.Channel, error) {
	channel := model.Channel{
		Name:        input.Name,
		Description: input.Description,
		Class:       input.Class,
		Stage:       input.Stage,
		Service:     input.Service,
		Address:     input.Address,
	}

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	_, error := db.Model(&channel).Insert()

	if error != nil {
		return nil, fmt.Errorf("error inserting new channel: %v", error)
	}

	return &channel, nil
}

// CreateAlert is the resolver for the createAlert field.
func (r *mutationResolver) CreateAlert(ctx context.Context, input model.NewAlert) (*model.Alert, error) {
	alert := model.Alert{
		Name:        input.Name,
		Description: input.Description,
		Measure:     input.Measure,
		Threshold:   input.Threshold,
	}

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	_, error := db.Model(&alert).Insert()

	if error != nil {
		return nil, fmt.Errorf("error inserting new channel: %v", error)
	}

	return &alert, nil
}

// CreateBudget is the resolver for the createBudget field.
func (r *mutationResolver) CreateBudget(ctx context.Context, input model.NewBudget) (*model.Budget, error) {
	budget := model.Budget{
		Name:       input.Name,
		Reference:  input.Reference,
		Term:       input.Term,
		Amount:     input.Amount,
		Correction: input.Correction,
	}

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	_, error := db.Model(&budget).Insert()

	if error != nil {
		return nil, fmt.Errorf("error inserting new budget: %v", error)
	}

	return &budget, nil
}

// CreateNotification is the resolver for the createNotification field.
func (r *mutationResolver) CreateNotification(ctx context.Context, input model.NewNotification) (*model.Notification, error) {
	notification := model.Notification{
		Control: input.Control,
		Scope:   input.Scope,
	}

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	_, error := db.Model(&notification).Insert()

	if error != nil {
		return nil, fmt.Errorf("error inserting new notification: %v", error)
	}

	return &notification, nil
}

// CreateRole is the resolver for the createRole field.
func (r *mutationResolver) CreateRole(ctx context.Context, input model.NewRole) (*model.Role, error) {
	role := model.Role{
		DomainID: input.DomainID,
		TaskID:   input.TaskID,
		Class:    input.Class,
		Stage:    input.Stage,
	}

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	_, error := db.Model(&role).Insert()

	if error != nil {
		return nil, fmt.Errorf("error inserting new role: %v", error)
	}

	return &role, nil
}

// CreateTask is the resolver for the createTask field.
func (r *mutationResolver) CreateTask(ctx context.Context, input model.NewTask) (*model.Task, error) {
	task := model.Task{
		Name:        input.Name,
		Description: input.Description,
		PrivilegeID: input.PrivilegeID,
	}

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	_, error := db.Model(&task).Insert()

	if error != nil {
		return nil, fmt.Errorf("error inserting new task: %v", error)
	}

	return &task, nil
}

// CreatePrivilege is the resolver for the createPrivilege field.
func (r *mutationResolver) CreatePrivilege(ctx context.Context, input model.NewPrivilege) (*model.Privilege, error) {
	privilege := model.Privilege{
		Name:        input.Name,
		Description: input.Description,
		Scope:       input.Scope,
	}

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	_, error := db.Model(&privilege).Insert()

	if error != nil {
		return nil, fmt.Errorf("error inserting new task: %v", error)
	}

	return &privilege, nil
}

// CreateStage is the resolver for the createStage field.
func (r *mutationResolver) CreateStage(ctx context.Context, input model.NewStage) (*model.Stage, error) {
	stage := model.Stage{
		Name:        input.Name,
		Description: input.Description,
	}

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	_, error := db.Model(&stage).Insert()

	if error != nil {
		return nil, fmt.Errorf("error inserting new stage: %v", error)
	}

	return &stage, nil
}

// CreateClass is the resolver for the createClass field.
func (r *mutationResolver) CreateClass(ctx context.Context, input model.NewClass) (*model.Class, error) {
	class := model.Class{
		Name:        input.Name,
		Description: input.Description,
	}

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	_, error := db.Model(&class).Insert()

	if error != nil {
		return nil, fmt.Errorf("error inserting new class: %v", error)
	}

	return &class, nil
}

// CreateDomain is the resolver for the createDomain field.
func (r *mutationResolver) CreateDomain(ctx context.Context, input model.NewDomain) (*model.Domain, error) {
	domain := model.Domain{
		Name:        input.Name,
		Description: input.Description,
	}

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	_, error := db.Model(&domain).Insert()

	if error != nil {
		return nil, fmt.Errorf("error inserting new class: %v", error)
	}

	return &domain, nil
}

// CreateAgreement is the resolver for the createAgreement field.
func (r *mutationResolver) CreateAgreement(ctx context.Context, input model.NewAgreement) (*model.Agreement, error) {
	agreement := model.Agreement{
		Topic:     input.Topic,
		RoleID:    input.RoleID,
		ChannelID: input.ChannelID,
	}

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	_, error := db.Model(&agreement).Insert()

	if error != nil {
		return nil, fmt.Errorf("error inserting new Agreement: %v", error)
	}

	return &agreement, nil
}

// CreateVpc is the resolver for the createVpc field.
func (r *mutationResolver) CreateVpc(ctx context.Context, input model.NewVpc) (*model.Vpc, error) {
	vpcId1 := awscompose.CreateVpc(input.CidrBlock)
	fmt.Println("THE VPC ID")
	fmt.Println(vpcId1)

	vpc := model.Vpc{
		Name:        input.Name,
		Description: input.Description,
		CidrBlock:   input.CidrBlock,
		VpcID:       vpcId1,
	}

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	_, error := db.Model(&vpc).Insert()

	if error != nil {
		return nil, fmt.Errorf("error inserting new VPC: %v", error)
	}

	return &vpc, nil
}

// CreateInternetgateway is the resolver for the createInternetgateway field.
func (r *mutationResolver) CreateInternetgateway(ctx context.Context, input model.NewInternetgateway) (*model.Internetgateway, error) {
	internetgatewayId := awscompose.CreateAndAttachInternetGateway(input.VpcID)
	internetGateway := model.Internetgateway{
		Name:              input.Name,
		Description:       input.Description,
		InternetGatewayID: internetgatewayId,
		VpcID:             input.VpcID,
	}

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	_, error := db.Model(&internetGateway).Insert()

	if error != nil {
		return nil, fmt.Errorf("error inserting new Internetgateway: %v", error)
	}

	return &internetGateway, nil
}

// CreateSubnet is the resolver for the createSubnet field.
func (r *mutationResolver) CreateSubnet(ctx context.Context, input model.NewSubnet) (*model.Subnet, error) {
	subnetId := awscompose.CreateSubnet(input.CidrBlock, input.VpcID)
	awscompose.AssociateRouteTable(input.RouteTableID, subnetId)
	subnet := model.Subnet{
		Name:         input.Name,
		Description:  input.Description,
		CidrBlock:    input.CidrBlock,
		VpcID:        input.VpcID,
		SubnetID:     subnetId,
		RouteTableID: input.RouteTableID,
	}

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	_, error := db.Model(&subnet).Insert()

	if error != nil {
		return nil, fmt.Errorf("error inserting new Subnet: %v", error)
	}

	return &subnet, nil
}

// CreateRouteTable is the resolver for the createRouteTable field.
func (r *mutationResolver) CreateRouteTable(ctx context.Context, input model.NewRouteTable) (*model.RouteTable, error) {
	routeTableId := awscompose.CreateRouteTable(input.VpcID)

	routeTable := model.RouteTable{
		Name:         input.Name,
		Description:  input.Description,
		VpcID:        input.VpcID,
		RouteTableID: routeTableId,
	}

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	_, error := db.Model(&routeTable).Insert()

	if error != nil {
		return nil, fmt.Errorf("error inserting new RouteTable: %v", error)
	}

	return &routeTable, nil
}

// CreateRoute is the resolver for the createRoute field.
func (r *mutationResolver) CreateRoute(ctx context.Context, input model.NewRoute) (*model.Route, error) {
	awscompose.CreateRoute(input.CidrBlock, input.InternetGatewayID, input.RouteTableID)

	route := model.Route{
		Name:              input.Name,
		Description:       input.Description,
		CidrBlock:         input.CidrBlock,
		InternetGatewayID: input.InternetGatewayID,
		RouteTableID:      input.RouteTableID,
	}
	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}
	db := pg.Connect(opt)
	defer db.Close()

	_, error := db.Model(&route).Insert()

	if error != nil {
		return nil, fmt.Errorf("error inserting new Route: %v", error)
	}

	return &route, nil
}

// CreateSecurityGroup is the resolver for the createSecurityGroup field.
func (r *mutationResolver) CreateSecurityGroup(ctx context.Context, input model.NewSecurityGroup) (*model.SecurityGroup, error) {
	securityGroupId := awscompose.CreateSecurityGroupAndAuthorizeIngressAndEgress(input.Description, input.Name, input.VpcID)

	securityGroup := model.SecurityGroup{
		Name:            input.Name,
		Description:     input.Description,
		SecurityGroupID: securityGroupId,
		VpcID:           input.VpcID,
	}
	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}
	db := pg.Connect(opt)
	defer db.Close()

	_, error := db.Model(&securityGroup).Insert()

	if error != nil {
		return nil, fmt.Errorf("error inserting new securityGroup: %v", error)
	}

	return &securityGroup, nil
}

// CreateNetworkInterface is the resolver for the createNetworkInterface field.
func (r *mutationResolver) CreateNetworkInterface(ctx context.Context, input model.NewNetworkInterface) (*model.NetworkInterface, error) {
	networkInterfaceId := awscompose.CreateNetworkInterface(input.Name, input.Description, input.SubnetID, input.SecurityGroupID, input.PrivateIPAddress)

	networkInterface := model.NetworkInterface{
		Name:               input.Name,
		Description:        input.Description,
		SubnetID:           input.SubnetID,
		SecurityGroupID:    input.SecurityGroupID,
		PrivateIPAddress:   input.PrivateIPAddress,
		NetworkInterfaceID: networkInterfaceId,
	}
	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}
	db := pg.Connect(opt)
	defer db.Close()

	_, error := db.Model(&networkInterface).Insert()

	if error != nil {
		return nil, fmt.Errorf("error inserting new network interface: %v", error)
	}

	return &networkInterface, nil
}

// CreateElasticIP is the resolver for the createElasticIp field.
func (r *mutationResolver) CreateElasticIP(ctx context.Context, input model.NewElasticIP) (*model.ElasticIP, error) {
	allocationId, ipAddress := awscompose.CreateAndAssociateElasticIp(input.NetworkInterfaceID)
	elasticIp := model.ElasticIP{
		Name:               input.Name,
		Description:        input.Description,
		NetworkInterfaceID: input.NetworkInterfaceID,
		AllocationID:       allocationId,
		IPAddress:          ipAddress,
	}
	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}
	db := pg.Connect(opt)
	defer db.Close()

	_, error := db.Model(&elasticIp).Insert()

	if error != nil {
		return nil, fmt.Errorf("error inserting new EIP: %v", error)
	}

	return &elasticIp, nil
}

// ReleaseElasticIP is the resolver for the releaseElasticIp field.
func (r *mutationResolver) ReleaseElasticIP(ctx context.Context, input *model.ElasticIPAllocation) (string, error) {
	awscompose.ReleaseElasticIpAddress(input.AllocationID)
	return input.AllocationID, nil
}

// CreateInstance is the resolver for the createInstance field.
func (r *mutationResolver) CreateInstance(ctx context.Context, input model.NewInstance) (*model.Instance, error) {
	instanceId := awscompose.RunInstance(input.ImageID, input.InstanceType, input.NetworkInterfaceID)

	instance := model.Instance{
		Name:               input.Name,
		Description:        input.Description,
		ImageID:            input.ImageID,
		InstanceType:       input.InstanceType,
		InstanceID:         &instanceId,
		NetworkInterfaceID: input.NetworkInterfaceID,
	}
	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}
	db := pg.Connect(opt)
	defer db.Close()

	_, error := db.Model(&instance).Insert()

	if error != nil {
		return nil, fmt.Errorf("error inserting new network interface: %v", error)
	}

	return &instance, nil
}

// CreateOciCompartment is the resolver for the createOciCompartment field.
func (r *mutationResolver) CreateOciCompartment(ctx context.Context, input model.NewOciCompartment) (*model.OciCompartment, error) {
	ociId := ocicompose.CreateOciCompartment(input.ParentCompartmentID, input.Name, input.Description)

	compartment := model.OciCompartment{
		Name:                input.Name,
		Description:         input.Description,
		ParentCompartmentID: input.ParentCompartmentID,
		OcID:                ociId,
	}
	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}
	db := pg.Connect(opt)
	defer db.Close()

	_, error := db.Model(&compartment).Insert()

	if error != nil {
		return nil, fmt.Errorf("error inserting new network interface: %v", error)
	}

	return &compartment, nil
}

// CreateOciVcn is the resolver for the createOciVcn field.
func (r *mutationResolver) CreateOciVcn(ctx context.Context, input model.NewOciVcn) (*model.OciVcn, error) {
	
	ociId := ocicompose.CreateOciVcn(input.CompartmentID, input.Name, input.Description)

	vcn := model.OciVcn{
		Name:                input.Name,
		Description:         input.Description,
		CompartmentID: input.CompartmentID,
		OcID:                ociId,
	}
	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}
	db := pg.Connect(opt)
	defer db.Close()

	_, error := db.Model(&vcn).Insert()

	if error != nil {
		return nil, fmt.Errorf("error inserting new OCI VCN: %v", error)
	}

	return &vcn, nil
}

// Movies is the resolver for the movies field.
func (r *queryResolver) Movies(ctx context.Context) ([]*model.Movie, error) {
	var movies []*model.Movie

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	error := db.Model(&movies).Select()
	if error != nil {
		return nil, error
	}

	return movies, nil
}

// Buckets is the resolver for the buckets field.
func (r *queryResolver) Buckets(ctx context.Context) ([]*model.Bucket, error) {
	var buckets []*model.Bucket

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	error := db.Model(&buckets).Select()
	if error != nil {
		return nil, error
	}

	return buckets, nil
}

// Filesystems is the resolver for the filesystems field.
func (r *queryResolver) Filesystems(ctx context.Context) ([]*model.Filesystem, error) {
	var filesystems []*model.Filesystem

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	error := db.Model(&filesystems).Select()
	if error != nil {
		return nil, error
	}

	return filesystems, nil
}

// Residents is the resolver for the residents field.
func (r *queryResolver) Residents(ctx context.Context) ([]*model.Resident, error) {
	var residents []*model.Resident

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	error := db.Model(&residents).Select()
	if error != nil {
		return nil, error
	}

	return residents, nil
}

// Dbs is the resolver for the dbs field.
func (r *queryResolver) Dbs(ctx context.Context) ([]*model.Db, error) {
	var dbs []*model.Db

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	error := db.Model(&dbs).Select()
	if error != nil {
		return nil, error
	}

	return dbs, nil
}

// Backups is the resolver for the backups field.
func (r *queryResolver) Backups(ctx context.Context) ([]*model.Backup, error) {
	var backups []*model.Backup

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	error := db.Model(&backups).Select()
	if error != nil {
		return nil, error
	}

	return backups, nil
}

// Sizes is the resolver for the sizes field.
func (r *queryResolver) Sizes(ctx context.Context) ([]*model.Size, error) {
	var sizes []*model.Size

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	error := db.Model(&sizes).Select()
	if error != nil {
		return nil, error
	}

	return sizes, nil
}

// Channels is the resolver for the channels field.
func (r *queryResolver) Channels(ctx context.Context) ([]*model.Channel, error) {
	var channels []*model.Channel

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	error := db.Model(&channels).Select()
	if error != nil {
		return nil, error
	}

	return channels, nil
}

// Alerts is the resolver for the alerts field.
func (r *queryResolver) Alerts(ctx context.Context) ([]*model.Alert, error) {
	var alerts []*model.Alert

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	error := db.Model(&alerts).Select()
	if error != nil {
		return nil, error
	}

	return alerts, nil
}

// Budgets is the resolver for the budgets field.
func (r *queryResolver) Budgets(ctx context.Context) ([]*model.Budget, error) {
	var budgets []*model.Budget

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	error := db.Model(&budgets).Select()
	if error != nil {
		return nil, error
	}

	return budgets, nil
}

// Notifications is the resolver for the notifications field.
func (r *queryResolver) Notifications(ctx context.Context) ([]*model.Notification, error) {
	var notifications []*model.Notification

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	error := db.Model(&notifications).Select()
	if error != nil {
		return nil, error
	}

	return notifications, nil
}

// Roles is the resolver for the roles field.
func (r *queryResolver) Roles(ctx context.Context) ([]*model.Role, error) {
	var roles []*model.Role

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	error := db.Model(&roles).Select()
	if error != nil {
		return nil, error
	}

	return roles, nil
}

// Tasks is the resolver for the tasks field.
func (r *queryResolver) Tasks(ctx context.Context) ([]*model.Task, error) {
	var tasks []*model.Task

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	error := db.Model(&tasks).Select()
	if error != nil {
		return nil, error
	}

	return tasks, nil
}

// Privileges is the resolver for the privileges field.
func (r *queryResolver) Privileges(ctx context.Context) ([]*model.Privilege, error) {
	var privileges []*model.Privilege

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	error := db.Model(&privileges).Select()
	if error != nil {
		return nil, error
	}

	return privileges, nil
}

// Stages is the resolver for the stages field.
func (r *queryResolver) Stages(ctx context.Context) ([]*model.Stage, error) {
	var stages []*model.Stage

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	error := db.Model(&stages).Select()
	if error != nil {
		return nil, error
	}

	return stages, nil
}

// Classes is the resolver for the classes field.
func (r *queryResolver) Classes(ctx context.Context) ([]*model.Class, error) {
	var classes []*model.Class

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	error := db.Model(&classes).Select()
	if error != nil {
		return nil, error
	}

	return classes, nil
}

// Domains is the resolver for the domains field.
func (r *queryResolver) Domains(ctx context.Context) ([]*model.Domain, error) {
	var domains []*model.Domain

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	error := db.Model(&domains).Select()
	if error != nil {
		return nil, error
	}

	return domains, nil
}

// Agreements is the resolver for the agreements field.
func (r *queryResolver) Agreements(ctx context.Context) ([]*model.Agreement, error) {
	var agreements []*model.Agreement

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	error := db.Model(&agreements).Select()
	if error != nil {
		return nil, error
	}

	return agreements, nil
}

// Vpcs is the resolver for the vpcs field.
func (r *queryResolver) Vpcs(ctx context.Context) ([]*model.Vpc, error) {
	var vpcs []*model.Vpc

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	error := db.Model(&vpcs).Select()
	if error != nil {
		return nil, error
	}

	return vpcs, nil
}

// Internetgateways is the resolver for the internetgateways field.
func (r *queryResolver) Internetgateways(ctx context.Context) ([]*model.Internetgateway, error) {
	var internetgateways []*model.Internetgateway

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	error := db.Model(&internetgateways).Select()
	if error != nil {
		return nil, error
	}

	return internetgateways, nil
}

// Subnets is the resolver for the subnets field.
func (r *queryResolver) Subnets(ctx context.Context) ([]*model.Subnet, error) {
	var subnets []*model.Subnet

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	error := db.Model(&subnets).Select()
	if error != nil {
		return nil, error
	}

	return subnets, nil
}

// Routetables is the resolver for the routetables field.
func (r *queryResolver) Routetables(ctx context.Context) ([]*model.RouteTable, error) {
	var routeTables []*model.RouteTable

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	error := db.Model(&routeTables).Select()
	if error != nil {
		return nil, error
	}

	return routeTables, nil
}

// Routes is the resolver for the routes field.
func (r *queryResolver) Routes(ctx context.Context) ([]*model.Route, error) {
	var routes []*model.Route

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	error := db.Model(&routes).Select()
	if error != nil {
		return nil, error
	}

	return routes, nil
}

// SecurityGroups is the resolver for the securityGroups field.
func (r *queryResolver) SecurityGroups(ctx context.Context) ([]*model.SecurityGroup, error) {
	var securityGroups []*model.SecurityGroup

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	error := db.Model(&securityGroups).Select()
	if error != nil {
		return nil, error
	}

	return securityGroups, nil
}

// NetworkInterfaces is the resolver for the networkInterfaces field.
func (r *queryResolver) NetworkInterfaces(ctx context.Context) ([]*model.NetworkInterface, error) {
	var networkInterfaces []*model.NetworkInterface

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	error := db.Model(&networkInterfaces).Select()
	if error != nil {
		return nil, error
	}

	return networkInterfaces, nil
}

// ElasticIps is the resolver for the elasticIps field.
func (r *queryResolver) ElasticIps(ctx context.Context) ([]*model.ElasticIP, error) {
	var elasticIps []*model.ElasticIP

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	error := db.Model(&elasticIps).Select()
	if error != nil {
		return nil, error
	}

	return elasticIps, nil
}

// Instances is the resolver for the instances field.
func (r *queryResolver) Instances(ctx context.Context) ([]*model.Instance, error) {
	panic(fmt.Errorf("not implemented: Instances - instances"))
}

// OciCompartments is the resolver for the ociCompartments field.
func (r *queryResolver) OciCompartments(ctx context.Context) ([]*model.OciCompartment, error) {
	var ociCompartments []*model.OciCompartment

	connStr := os.Getenv("DB_URL")
	opt, err := pg.ParseURL(connStr)
	if err != nil {
		panic(err)
	}

	db := pg.Connect(opt)
	defer db.Close()

	error := db.Model(&ociCompartments).Select()
	if error != nil {
		return nil, error
	}

	return ociCompartments, nil
}

// OciVcns is the resolver for the ociVcns field.
func (r *queryResolver) OciVcns(ctx context.Context) ([]*model.OciVcn, error) {
	panic(fmt.Errorf("not implemented: OciVcns - ociVcns"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
